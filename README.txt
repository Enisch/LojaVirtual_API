README.md

# Loja virtual/API

Sugest√£o da cria√ß√£o de uma api atrav√©s de um t√≥pico na internet sobre, Constru√ß√£o de uma Loja Virtual, que diz que:
		
				Que tal desenvolver uma loja virtual? Com esse projeto, voc√™ poder√° ter uma vis√£o mais pr√°tica do desenvolvimento backend. Utilize HTML, CSS e JavaScript 				para a parte frontend e uma linguagem de programa√ß√£o backend como Python ou PHP para criar a l√≥gica de neg√≥cio por tr√°s da loja, como a exibi√ß√£o de 					produtos, gerenciamento de carrinho de compras e processamento de pedidos. Aprenda a utilizar bancos de dados para armazenar informa√ß√µes sobre produtos e 				clientes, e experimente a integra√ß√£o de sistemas de pagamento online.

√â um projeto √∫til, pois me ajudou/Ajudar√° a pesquisar por t√≥picos que ensinem como integrar projetos BackEnd's junto do FrontEnd.


### üõ†Ô∏è Linguagens e pacotes utilizados:

- Linguagem utilizada:C#
- Visual Studio 2022
- O projeto foi construido com o .NET 8.0
- Foi utilizado o banco de dados MYSQl WorkBench 8.0 CE

	#### Pacotes Nuggets:
	-Entity.FrameworkCore/ Entity.FrameworkCore.Desing/ Entity.FrameworkCore.Tools(Todos na vers√£o 8.0.3)
	-Pomelo.EntityFrameWorkCore.MySql.(Vers√£o 8.0.1)
	-AspNetCore.Authentication.JwtBearer.(Vers√£o 8.0.3)	
	-Swashbuckle.AspNetCore.Swagger/ Swashbuckle.AspNetCore.SwaggerGen/ Swashbuckle.AspNetCore.SwaggerUI.(Todos na vers√£o 6.5.0)

,

## üìå Vers√£o do projeto:

###vers√£o 1, inclui: 
	Quase todas as implementa√ß√µes propostas para o projeto BackEnd foram concluidas.
	Login de usuario.
	Checagem e compra de produtos.
	Registro de usuario.
	Token JWt implementado e funcionando com o Swagger.
	Inje√ß√µes de independ√™ncia.
